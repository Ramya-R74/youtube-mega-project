stages:
    - npm
    - sonar
    - trivy file scan 
    - docker
    - trivy image scan
    - deploy on ec2

install dependensies:
    stage: npm
    image:
        name: node:16
    script:
        - npm install

sonarqube-check:
  stage: sonar
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - main

trivy file scan:
    stage: trivy file scan
    image: 
        name: aquasec/trivy:latest
        entrypoint: [""]
    script:
        - trivy fs .

docker build and run:
    stage: docker
    image:
        name: docker:latest
    services:
        - docker:dind
    script:
        - docker build --build-arg REACT_APP_RAPID_API_KEY=0b50718853mshcd01439d0c0990dp19c3fajsn23a82344376d -t youtube:v1 .
        - docker tag youtube:v1 ramya74/youtube:v1
        - docker login -u $DOCKER_USER -p $DOCKER_PASSWD
        - docker push ramya74/youtube:v1
        - docker logout

image scan using trivy:
    stage: trivy image scan
    image: 
        name: aquasec/trivy:latest
        entrypoint: [""]
    script:
        - trivy image ramya74/youtube:v1

run application on EC2:
    stage: deploy on ec2
    script:
        - docker run -d --name youtubeApp -p 3000:3000 ramya74/youtube:v1
    tags:
        - youtube

        
        
